name: Ronin Frontend CI/CD

on:
  push:
    branches:
      - main

env:
  FRONTEND_REPO: ronin-frontend
  DOCKERHUB_USERNAME: yehorzudikhin

jobs:
  setup:
    name: Setup frontend pipeline environment
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 23
          cache: "npm"
          cache-dependency-path: ronin-frontend/package-lock.json

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ronin-frontend/node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('ronin-frontend/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Install Dependencies
        working-directory: ronin-frontend
        run: npm install

  sast:
    name: SonarQube Analysis
    runs-on: ubuntu-24.04
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: ronin-frontend
          args: >
            -Dsonar.sources=src
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORG }}

  sca:
    name: Snyk Security Scan
    runs-on: ubuntu-24.04
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore npm dependencies
        uses: actions/cache@v4
        with:
          path: ronin-frontend/node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('ronin-frontend/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Install Dependencies
        working-directory: ronin-frontend
        run: npm install

      - name: Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=ronin-frontend/package.json

  test:
    name: Frontend Unit Tests
    runs-on: ubuntu-24.04
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore npm dependencies
        uses: actions/cache@v4
        with:
          path: ronin-frontend/node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('ronin-frontend/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Run Vitest Tests
        working-directory: ronin-frontend
        run: npm run test

  deliver:
    name: Build & Deploy to Docker Hub
    runs-on: ubuntu-24.04
    needs: [sast, sca, test]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        run: |
          docker buildx build --platform linux/amd64 -t ${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_REPO }}:${{ github.sha }} ronin-frontend

      - name: Push to Docker Hub
        run: |
          docker push ${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_REPO }}:${{ github.sha }}

  dast:
    name: DAST with OWASP ZAP
    runs-on: ubuntu-24.04
    needs: deliver
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Build Backend JAR
        run: |
          cd ronin-backend
          mvn clean package -DskipTests
          cd ..

      - name: Start Services with Docker Compose
        run: |
          docker compose -f compose.yaml up -d
          until curl -s http://localhost:3000 > /dev/null; do echo "Waiting for app..."; sleep 5; done

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "http://localhost:3000"
          fail_action: false

      - name: Stop Docker Compose
        if: always()
        run: docker compose -f compose.yaml down

  deploy:
    name: Deploy to EKS through GitOps trigger
    runs-on: ubuntu-24.04
    needs: [dast]
    steps:
      - name: Setup yq
        uses: dcarbone/install-yq-action@v1

      - name: Checkout Infra Repo
        uses: actions/checkout@v4
        with:
          repository: GeorgeZudikhin/ronin-infra
          token: ${{ secrets.INFRA_REPO_ACCESS_TOKEN }}
          path: ronin-infra

      - name: Update image tag in values.yaml
        run: |
          cd ronin-infra/k8s/charts/ronin-frontend
          yq -i ".image.tag = \"$GITHUB_SHA\"" values.yaml

      - name: Commit and push updated tag
        run: |
          cd ronin-infra
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .
          git commit -m "ci: update frontend image tag to $GITHUB_SHA"
          git push origin main
