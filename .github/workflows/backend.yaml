name: Ronin Backend CI/CD

on:
  push:
    branches:
      - main

env:
  BACKEND_ECR_REPO: ronin-backend

jobs:
  setup:
    name: Setup backend pipeline environment
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: ronin-backend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: maven-${{ runner.os }}-${{ hashFiles('ronin-backend/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Install Dependencies
        working-directory: ronin-backend
        run: mvn dependency:resolve

  build:
    name: Build Backend App
    runs-on: ubuntu-24.04
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Build with Maven
        working-directory: ronin-backend
        run: mvn clean package -DskipTests

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ronin-backend-jar
          path: ronin-backend/target/*.jar

  sast:
    name: SonarQube Analysis
    runs-on: ubuntu-24.04
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: SonarQube Scan
        working-directory: ronin-backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify -DskipTests \
            org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \ 
            -Dsonar.projectKey=GeorgeZudikhin_ronin-fullstack \
            -Dspring.profiles.active=sonar

  sca:
    name: Snyk Security Scan
    runs-on: ubuntu-24.04
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Snyk Security Scan
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=ronin-backend/pom.xml

  deliver:
    name: Build & Deploy to AWS ECR
    runs-on: ubuntu-24.04
    needs: [build, sast, sca]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ronin-backend-jar
          path: ronin-backend/target

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.BACKEND_ECR_REPO }} ronin-backend

      - name: Tag and Push to ECR
        run: |
          docker tag ${{ env.BACKEND_ECR_REPO }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.BACKEND_ECR_REPO }}:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.BACKEND_ECR_REPO }}:latest
